# Drosophila analysis POMO SELECT
data <- readCharacterDataDelimited("data/pomo20_naturalnumbers_Drosophila_filtered.txt",stateLabels=118, type="NaturalNumbers", delimiter=" ", header=FALSE)

taxa       <- data.taxa()

n_taxa     <- data.ntaxa()

n_branches <- 2 * n_taxa - 3


# set up moves and monitors 

moves    = VectorMoves()  

monitors = VectorMonitors()



# population size

N <- 20



# base frequencies

pi_prior <- [0.25,0.25,0.25,0.25]

pi ~ dnDirichlet(pi_prior)

moves.append( mvBetaSimplex( pi , weight=3 ))


# exchangebilities

for (i in 1:6){

  rho[i] ~ dnExponential(100.0)

  moves.append(mvScale( rho[i], weight=2 ))

}

mu := [pi[2]*rho[1], pi[1]*rho[1], pi[3]*rho[2], pi[1]*rho[2], pi[4]*rho[3], pi[1]*rho[3], pi[3]*rho[4], pi[2]*rho[4], pi[4]*rho[5], pi[2]*rho[5], pi[4]*rho[6], pi[3]*rho[6]]

sigma ~ dnExponential(10.0)

moves.append(mvScale( sigma, weight=30 ))


phi := [1.0,1.0+sigma,1.0+sigma,1.0]

# balancing selection

beta <- [1, 1, 1, 1, 1, 1]

# balanced frequencies

B <- [10, 10, 10, 10, 10, 10]

# rate matrix

Q := fnPoMoBalance4N(N,mu,phi,beta,B)


# # defining the tree
########################################################
# MOLECULAR CLOCK

# we assume a strict morphological clock rate, drawn from an exponential prior

branch_rates ~ dnExponential(1.0)

moves.append( mvScale(branch_rates,lambda=0.5,tune=true,weight=2.0) )

# TIME TREE

# Define prior on the age of the root

root_age <- 1.0

psi ~ dnUniformTimeTree(rootAge=root_age, taxa=taxa)

# Specify moves on the tree and node times 

moves.append( mvNarrow(psi, weight=n_taxa) )

moves.append( mvFNPR(psi, weight=n_taxa/4) )

moves.append( mvSubtreeScale(psi, weight=n_taxa/5) )

moves.append( mvNodeTimeSlideUniform(psi, weight=n_taxa) )

sequences ~ dnPhyloCTMC(tree=psi, Q=Q, branchRates=branch_rates, type="NaturalNumbers")

sequences.clamp(data)



# MCMC 

# initialize the model object 

mymodel = model(Q)


#specify monitors and output files

monitors.append(mnModel(filename="output_Select/test_pomo_balance.log",printgen=10))
  
monitors.append( mnFile(filename="output_Select/test_pomo_balance.trees", printgen=10, psi) )

monitors.append(mnScreen(printgen=10))


# mcmc sampling

pbalance_mcmc = mcmcmc(mymodel, monitors, moves, nruns=4, combine="mixed", deltaHeat=5)
  
pbalance_mcmc.burnin(generations=2000,tuningInterval=200)
pbalance_mcmc.run(generations=20000,checkpointFile="output_Select/test_pomo_balance_checkpoint.txt",checkpointInterval=100)
  
# computing the maximum a posteriori tree

trace = readTreeTrace("output_Select/test_pomo_balance.trees", treetype="non-clock", burnin= 0.2)

mapTree(trace, file="output_Select/test_pomo_balance_MAP.tree" )
mccTree(trace, file="output_Select/test_pomo_balance_mcc.tree" )

q()
